<code >
    <namespace name="Qt">
        <enum name="Qt::WindowType">
            <accessPolicy value="public"/>
            <enumerator value="0x00000000">Widget</enumerator>
            <enumerator value="0x00000001">Window</enumerator>
            <enumerator value="0x00000002|Window">Dialog</enumerator>
            <enumerator value="0x00000004|Window">Sheet</enumerator>
            <enumerator value="Sheet|Dialog">Drawer</enumerator>
            <enumerator value="0x00000008|Window">Popup</enumerator>
            <enumerator value="Popup|Dialog">Tool</enumerator>
            <enumerator value="Popup|Sheet">ToolTip</enumerator>
            <enumerator value="ToolTip|Dialog">SplashScreen</enumerator>
            <enumerator value="0x00000010|Window">Desktop</enumerator>
            <enumerator value="0x00000012">SubWindow</enumerator>
            <enumerator value="0x000000ff">WindowType_Mask</enumerator>
            <enumerator value="0x00000100">MSWindowsFixedSizeDialogHint</enumerator>
            <enumerator value="0x00000200">MSWindowsOwnDC</enumerator>
            <enumerator value="0x00000400">X11BypassWindowManagerHint</enumerator>
            <enumerator value="0x00000800">FramelessWindowHint</enumerator>
            <enumerator value="0x00001000">WindowTitleHint</enumerator>
            <enumerator value="0x00002000">WindowSystemMenuHint</enumerator>
            <enumerator value="0x00004000">WindowMinimizeButtonHint</enumerator>
            <enumerator value="0x00008000">WindowMaximizeButtonHint</enumerator>
            <enumerator value="WindowMinimizeButtonHint|WindowMaximizeButtonHint">WindowMinMaxButtonsHint</enumerator>
            <enumerator value="0x00010000">WindowContextHelpButtonHint</enumerator>
            <enumerator value="0x00020000">WindowShadeButtonHint</enumerator>
            <enumerator value="0x00040000">WindowStaysOnTopHint</enumerator>
            <enumerator value="0x00080000">WindowTransparentForInput</enumerator>
            <enumerator value="0x00100000">WindowOverridesSystemGestures</enumerator>
            <enumerator value="0x00200000">WindowDoesNotAcceptFocus</enumerator>
            <enumerator value="0x02000000">CustomizeWindowHint</enumerator>
            <enumerator value="0x04000000">WindowStaysOnBottomHint</enumerator>
            <enumerator value="0x08000000">WindowCloseButtonHint</enumerator>
            <enumerator value="0x10000000">MacWindowToolBarButtonHint</enumerator>
            <enumerator value="0x20000000">BypassGraphicsProxyWidget</enumerator>
            <enumerator value="0x00080000">WindowOkButtonHint</enumerator>
            <enumerator value="0x00100000">WindowCancelButtonHint</enumerator>
            <enumerator value="0x40000000">NoDropShadowWindowHint</enumerator>
            <enumerator value="0x80000000">WindowFullscreenButtonHint</enumerator>
        </enum>
        <enum name="Qt::ItemDataRole">
            <accessPolicy value="public"/>
            <enumerator value="0">DisplayRole</enumerator>
            <enumerator value="1">DecorationRole</enumerator>
            <enumerator value="2">EditRole</enumerator>
            <enumerator value="3">ToolTipRole</enumerator>
            <enumerator value="4">StatusTipRole</enumerator>
            <enumerator value="5">WhatsThisRole</enumerator>
            <enumerator value="6">FontRole</enumerator>
            <enumerator value="7">TextAlignmentRole</enumerator>
            <enumerator value="8">BackgroundColorRole</enumerator>
            <enumerator value="8">BackgroundRole</enumerator>
            <enumerator value="9">TextColorRole</enumerator>
            <enumerator value="9">ForegroundRole</enumerator>
            <enumerator value="10">CheckStateRole</enumerator>
            <enumerator value="11">AccessibleTextRole</enumerator>
            <enumerator value="12">AccessibleDescriptionRole</enumerator>
            <enumerator value="13">SizeHintRole</enumerator>
            <enumerator value="14">InitialSortOrderRole</enumerator>
            <enumerator value="27">DisplayPropertyRole</enumerator>
            <enumerator value="28">DecorationPropertyRole</enumerator>
            <enumerator value="29">ToolTipPropertyRole</enumerator>
            <enumerator value="30">StatusTipPropertyRole</enumerator>
            <enumerator value="31">WhatsThisPropertyRole</enumerator>
            <enumerator value="0x0100">UserRole</enumerator>
        </enum>
        <enum name="Qt::Key">
            <accessPolicy value="public"/>
            <enumerator value="0x01000000">Key_Escape</enumerator>
            <enumerator value="0x01000001">Key_Tab</enumerator>
            <enumerator value="0x01000002">Key_Backtab</enumerator>
            <enumerator value="0x01000003">Key_Backspace</enumerator>
            <enumerator value="0x01000004">Key_Return</enumerator>
            <enumerator value="0x01000005">Key_Enter</enumerator>
            <enumerator value="0x01000006">Key_Insert</enumerator>
            <enumerator value="0x01000007">Key_Delete</enumerator>
            <enumerator value="0x01000008">Key_Pause</enumerator>
            <enumerator value="0x01000009">Key_Print</enumerator>
            <enumerator value="0x0100000a">Key_SysReq</enumerator>
            <enumerator value="0x0100000b">Key_Clear</enumerator>
            <enumerator value="0x01000010">Key_Home</enumerator>
            <enumerator value="0x01000011">Key_End</enumerator>
            <enumerator value="0x01000012">Key_Left</enumerator>
            <enumerator value="0x01000013">Key_Up</enumerator>
            <enumerator value="0x01000014">Key_Right</enumerator>
            <enumerator value="0x01000015">Key_Down</enumerator>
            <enumerator value="0x01000016">Key_PageUp</enumerator>
            <enumerator value="0x01000017">Key_PageDown</enumerator>
            <enumerator value="0x01000020">Key_Shift</enumerator>
            <enumerator value="0x01000021">Key_Control</enumerator>
            <enumerator value="0x01000022">Key_Meta</enumerator>
            <enumerator value="0x01000023">Key_Alt</enumerator>
            <enumerator value="0x01000024">Key_CapsLock</enumerator>
            <enumerator value="0x01000025">Key_NumLock</enumerator>
            <enumerator value="0x01000026">Key_ScrollLock</enumerator>
            <enumerator value="0x01000030">Key_F1</enumerator>
            <enumerator value="0x01000031">Key_F2</enumerator>
            <enumerator value="0x01000032">Key_F3</enumerator>
            <enumerator value="0x01000033">Key_F4</enumerator>
            <enumerator value="0x01000034">Key_F5</enumerator>
            <enumerator value="0x01000035">Key_F6</enumerator>
            <enumerator value="0x01000036">Key_F7</enumerator>
            <enumerator value="0x01000037">Key_F8</enumerator>
            <enumerator value="0x01000038">Key_F9</enumerator>
            <enumerator value="0x01000039">Key_F10</enumerator>
            <enumerator value="0x0100003a">Key_F11</enumerator>
            <enumerator value="0x0100003b">Key_F12</enumerator>
            <enumerator value="0x0100003c">Key_F13</enumerator>
            <enumerator value="0x0100003d">Key_F14</enumerator>
            <enumerator value="0x0100003e">Key_F15</enumerator>
            <enumerator value="0x0100003f">Key_F16</enumerator>
            <enumerator value="0x01000040">Key_F17</enumerator>
            <enumerator value="0x01000041">Key_F18</enumerator>
            <enumerator value="0x01000042">Key_F19</enumerator>
            <enumerator value="0x01000043">Key_F20</enumerator>
            <enumerator value="0x01000044">Key_F21</enumerator>
            <enumerator value="0x01000045">Key_F22</enumerator>
            <enumerator value="0x01000046">Key_F23</enumerator>
            <enumerator value="0x01000047">Key_F24</enumerator>
            <enumerator value="0x01000048">Key_F25</enumerator>
            <enumerator value="0x01000049">Key_F26</enumerator>
            <enumerator value="0x0100004a">Key_F27</enumerator>
            <enumerator value="0x0100004b">Key_F28</enumerator>
            <enumerator value="0x0100004c">Key_F29</enumerator>
            <enumerator value="0x0100004d">Key_F30</enumerator>
            <enumerator value="0x0100004e">Key_F31</enumerator>
            <enumerator value="0x0100004f">Key_F32</enumerator>
            <enumerator value="0x01000050">Key_F33</enumerator>
            <enumerator value="0x01000051">Key_F34</enumerator>
            <enumerator value="0x01000052">Key_F35</enumerator>
            <enumerator value="0x01000053">Key_Super_L</enumerator>
            <enumerator value="0x01000054">Key_Super_R</enumerator>
            <enumerator value="0x01000055">Key_Menu</enumerator>
            <enumerator value="0x01000056">Key_Hyper_L</enumerator>
            <enumerator value="0x01000057">Key_Hyper_R</enumerator>
            <enumerator value="0x01000058">Key_Help</enumerator>
            <enumerator value="0x01000059">Key_Direction_L</enumerator>
            <enumerator value="0x01000060">Key_Direction_R</enumerator>
            <enumerator value="0x20">Key_Space</enumerator>
            <enumerator value="Key_Space">Key_Any</enumerator>
            <enumerator value="0x21">Key_Exclam</enumerator>
            <enumerator value="0x22">Key_QuoteDbl</enumerator>
            <enumerator value="0x23">Key_NumberSign</enumerator>
            <enumerator value="0x24">Key_Dollar</enumerator>
            <enumerator value="0x25">Key_Percent</enumerator>
            <enumerator value="0x26">Key_Ampersand</enumerator>
            <enumerator value="0x27">Key_Apostrophe</enumerator>
            <enumerator value="0x28">Key_ParenLeft</enumerator>
            <enumerator value="0x29">Key_ParenRight</enumerator>
            <enumerator value="0x2a">Key_Asterisk</enumerator>
            <enumerator value="0x2b">Key_Plus</enumerator>
            <enumerator value="0x2c">Key_Comma</enumerator>
            <enumerator value="0x2d">Key_Minus</enumerator>
            <enumerator value="0x2e">Key_Period</enumerator>
            <enumerator value="0x2f">Key_Slash</enumerator>
            <enumerator value="0x30">Key_0</enumerator>
            <enumerator value="0x31">Key_1</enumerator>
            <enumerator value="0x32">Key_2</enumerator>
            <enumerator value="0x33">Key_3</enumerator>
            <enumerator value="0x34">Key_4</enumerator>
            <enumerator value="0x35">Key_5</enumerator>
            <enumerator value="0x36">Key_6</enumerator>
            <enumerator value="0x37">Key_7</enumerator>
            <enumerator value="0x38">Key_8</enumerator>
            <enumerator value="0x39">Key_9</enumerator>
            <enumerator value="0x3a">Key_Colon</enumerator>
            <enumerator value="0x3b">Key_Semicolon</enumerator>
            <enumerator value="0x3c">Key_Less</enumerator>
            <enumerator value="0x3d">Key_Equal</enumerator>
            <enumerator value="0x3e">Key_Greater</enumerator>
            <enumerator value="0x3f">Key_Question</enumerator>
            <enumerator value="0x40">Key_At</enumerator>
            <enumerator value="0x41">Key_A</enumerator>
            <enumerator value="0x42">Key_B</enumerator>
            <enumerator value="0x43">Key_C</enumerator>
            <enumerator value="0x44">Key_D</enumerator>
            <enumerator value="0x45">Key_E</enumerator>
            <enumerator value="0x46">Key_F</enumerator>
            <enumerator value="0x47">Key_G</enumerator>
            <enumerator value="0x48">Key_H</enumerator>
            <enumerator value="0x49">Key_I</enumerator>
            <enumerator value="0x4a">Key_J</enumerator>
            <enumerator value="0x4b">Key_K</enumerator>
            <enumerator value="0x4c">Key_L</enumerator>
            <enumerator value="0x4d">Key_M</enumerator>
            <enumerator value="0x4e">Key_N</enumerator>
            <enumerator value="0x4f">Key_O</enumerator>
            <enumerator value="0x50">Key_P</enumerator>
            <enumerator value="0x51">Key_Q</enumerator>
            <enumerator value="0x52">Key_R</enumerator>
            <enumerator value="0x53">Key_S</enumerator>
            <enumerator value="0x54">Key_T</enumerator>
            <enumerator value="0x55">Key_U</enumerator>
            <enumerator value="0x56">Key_V</enumerator>
            <enumerator value="0x57">Key_W</enumerator>
            <enumerator value="0x58">Key_X</enumerator>
            <enumerator value="0x59">Key_Y</enumerator>
            <enumerator value="0x5a">Key_Z</enumerator>
            <enumerator value="0x5b">Key_BracketLeft</enumerator>
            <enumerator value="0x5c">Key_Backslash</enumerator>
            <enumerator value="0x5d">Key_BracketRight</enumerator>
            <enumerator value="0x5e">Key_AsciiCircum</enumerator>
            <enumerator value="0x5f">Key_Underscore</enumerator>
            <enumerator value="0x60">Key_QuoteLeft</enumerator>
            <enumerator value="0x7b">Key_BraceLeft</enumerator>
            <enumerator value="0x7c">Key_Bar</enumerator>
            <enumerator value="0x7d">Key_BraceRight</enumerator>
            <enumerator value="0x7e">Key_AsciiTilde</enumerator>
            <enumerator value="0x0a0">Key_nobreakspace</enumerator>
            <enumerator value="0x0a1">Key_exclamdown</enumerator>
            <enumerator value="0x0a2">Key_cent</enumerator>
            <enumerator value="0x0a3">Key_sterling</enumerator>
            <enumerator value="0x0a4">Key_currency</enumerator>
            <enumerator value="0x0a5">Key_yen</enumerator>
            <enumerator value="0x0a6">Key_brokenbar</enumerator>
            <enumerator value="0x0a7">Key_section</enumerator>
            <enumerator value="0x0a8">Key_diaeresis</enumerator>
            <enumerator value="0x0a9">Key_copyright</enumerator>
            <enumerator value="0x0aa">Key_ordfeminine</enumerator>
            <enumerator value="0x0ab">Key_guillemotleft</enumerator>
            <enumerator value="0x0ac">Key_notsign</enumerator>
            <enumerator value="0x0ad">Key_hyphen</enumerator>
            <enumerator value="0x0ae">Key_registered</enumerator>
            <enumerator value="0x0af">Key_macron</enumerator>
            <enumerator value="0x0b0">Key_degree</enumerator>
            <enumerator value="0x0b1">Key_plusminus</enumerator>
            <enumerator value="0x0b2">Key_twosuperior</enumerator>
            <enumerator value="0x0b3">Key_threesuperior</enumerator>
            <enumerator value="0x0b4">Key_acute</enumerator>
            <enumerator value="0x0b5">Key_mu</enumerator>
            <enumerator value="0x0b6">Key_paragraph</enumerator>
            <enumerator value="0x0b7">Key_periodcentered</enumerator>
            <enumerator value="0x0b8">Key_cedilla</enumerator>
            <enumerator value="0x0b9">Key_onesuperior</enumerator>
            <enumerator value="0x0ba">Key_masculine</enumerator>
            <enumerator value="0x0bb">Key_guillemotright</enumerator>
            <enumerator value="0x0bc">Key_onequarter</enumerator>
            <enumerator value="0x0bd">Key_onehalf</enumerator>
            <enumerator value="0x0be">Key_threequarters</enumerator>
            <enumerator value="0x0bf">Key_questiondown</enumerator>
            <enumerator value="0x0c0">Key_Agrave</enumerator>
            <enumerator value="0x0c1">Key_Aacute</enumerator>
            <enumerator value="0x0c2">Key_Acircumflex</enumerator>
            <enumerator value="0x0c3">Key_Atilde</enumerator>
            <enumerator value="0x0c4">Key_Adiaeresis</enumerator>
            <enumerator value="0x0c5">Key_Aring</enumerator>
            <enumerator value="0x0c6">Key_AE</enumerator>
            <enumerator value="0x0c7">Key_Ccedilla</enumerator>
            <enumerator value="0x0c8">Key_Egrave</enumerator>
            <enumerator value="0x0c9">Key_Eacute</enumerator>
            <enumerator value="0x0ca">Key_Ecircumflex</enumerator>
            <enumerator value="0x0cb">Key_Ediaeresis</enumerator>
            <enumerator value="0x0cc">Key_Igrave</enumerator>
            <enumerator value="0x0cd">Key_Iacute</enumerator>
            <enumerator value="0x0ce">Key_Icircumflex</enumerator>
            <enumerator value="0x0cf">Key_Idiaeresis</enumerator>
            <enumerator value="0x0d0">Key_ETH</enumerator>
            <enumerator value="0x0d1">Key_Ntilde</enumerator>
            <enumerator value="0x0d2">Key_Ograve</enumerator>
            <enumerator value="0x0d3">Key_Oacute</enumerator>
            <enumerator value="0x0d4">Key_Ocircumflex</enumerator>
            <enumerator value="0x0d5">Key_Otilde</enumerator>
            <enumerator value="0x0d6">Key_Odiaeresis</enumerator>
            <enumerator value="0x0d7">Key_multiply</enumerator>
            <enumerator value="0x0d8">Key_Ooblique</enumerator>
            <enumerator value="0x0d9">Key_Ugrave</enumerator>
            <enumerator value="0x0da">Key_Uacute</enumerator>
            <enumerator value="0x0db">Key_Ucircumflex</enumerator>
            <enumerator value="0x0dc">Key_Udiaeresis</enumerator>
            <enumerator value="0x0dd">Key_Yacute</enumerator>
            <enumerator value="0x0de">Key_THORN</enumerator>
            <enumerator value="0x0df">Key_ssharp</enumerator>
            <enumerator value="0x0f7">Key_division</enumerator>
            <enumerator value="0x0ff">Key_ydiaeresis</enumerator>
            <enumerator value="0x01001103">Key_AltGr</enumerator>
            <enumerator value="0x01001120">Key_Multi_key</enumerator>
            <enumerator value="0x01001137">Key_Codeinput</enumerator>
            <enumerator value="0x0100113c">Key_SingleCandidate</enumerator>
            <enumerator value="0x0100113d">Key_MultipleCandidate</enumerator>
            <enumerator value="0x0100113e">Key_PreviousCandidate</enumerator>
            <enumerator value="0x0100117e">Key_Mode_switch</enumerator>
            <enumerator value="0x01001121">Key_Kanji</enumerator>
            <enumerator value="0x01001122">Key_Muhenkan</enumerator>
            <enumerator value="0x01001123">Key_Henkan</enumerator>
            <enumerator value="0x01001124">Key_Romaji</enumerator>
            <enumerator value="0x01001125">Key_Hiragana</enumerator>
            <enumerator value="0x01001126">Key_Katakana</enumerator>
            <enumerator value="0x01001127">Key_Hiragana_Katakana</enumerator>
            <enumerator value="0x01001128">Key_Zenkaku</enumerator>
            <enumerator value="0x01001129">Key_Hankaku</enumerator>
            <enumerator value="0x0100112a">Key_Zenkaku_Hankaku</enumerator>
            <enumerator value="0x0100112b">Key_Touroku</enumerator>
            <enumerator value="0x0100112c">Key_Massyo</enumerator>
            <enumerator value="0x0100112d">Key_Kana_Lock</enumerator>
            <enumerator value="0x0100112e">Key_Kana_Shift</enumerator>
            <enumerator value="0x0100112f">Key_Eisu_Shift</enumerator>
            <enumerator value="0x01001130">Key_Eisu_toggle</enumerator>
            <enumerator value="0x01001131">Key_Hangul</enumerator>
            <enumerator value="0x01001132">Key_Hangul_Start</enumerator>
            <enumerator value="0x01001133">Key_Hangul_End</enumerator>
            <enumerator value="0x01001134">Key_Hangul_Hanja</enumerator>
            <enumerator value="0x01001135">Key_Hangul_Jamo</enumerator>
            <enumerator value="0x01001136">Key_Hangul_Romaja</enumerator>
            <enumerator value="0x01001138">Key_Hangul_Jeonja</enumerator>
            <enumerator value="0x01001139">Key_Hangul_Banja</enumerator>
            <enumerator value="0x0100113a">Key_Hangul_PreHanja</enumerator>
            <enumerator value="0x0100113b">Key_Hangul_PostHanja</enumerator>
            <enumerator value="0x0100113f">Key_Hangul_Special</enumerator>
            <enumerator value="0x01001250">Key_Dead_Grave</enumerator>
            <enumerator value="0x01001251">Key_Dead_Acute</enumerator>
            <enumerator value="0x01001252">Key_Dead_Circumflex</enumerator>
            <enumerator value="0x01001253">Key_Dead_Tilde</enumerator>
            <enumerator value="0x01001254">Key_Dead_Macron</enumerator>
            <enumerator value="0x01001255">Key_Dead_Breve</enumerator>
            <enumerator value="0x01001256">Key_Dead_Abovedot</enumerator>
            <enumerator value="0x01001257">Key_Dead_Diaeresis</enumerator>
            <enumerator value="0x01001258">Key_Dead_Abovering</enumerator>
            <enumerator value="0x01001259">Key_Dead_Doubleacute</enumerator>
            <enumerator value="0x0100125a">Key_Dead_Caron</enumerator>
            <enumerator value="0x0100125b">Key_Dead_Cedilla</enumerator>
            <enumerator value="0x0100125c">Key_Dead_Ogonek</enumerator>
            <enumerator value="0x0100125d">Key_Dead_Iota</enumerator>
            <enumerator value="0x0100125e">Key_Dead_Voiced_Sound</enumerator>
            <enumerator value="0x0100125f">Key_Dead_Semivoiced_Sound</enumerator>
            <enumerator value="0x01001260">Key_Dead_Belowdot</enumerator>
            <enumerator value="0x01001261">Key_Dead_Hook</enumerator>
            <enumerator value="0x01001262">Key_Dead_Horn</enumerator>
            <enumerator value="0x01000061">Key_Back</enumerator>
            <enumerator value="0x01000062">Key_Forward</enumerator>
            <enumerator value="0x01000063">Key_Stop</enumerator>
            <enumerator value="0x01000064">Key_Refresh</enumerator>
            <enumerator value="0x01000070">Key_VolumeDown</enumerator>
            <enumerator value="0x01000071">Key_VolumeMute</enumerator>
            <enumerator value="0x01000072">Key_VolumeUp</enumerator>
            <enumerator value="0x01000073">Key_BassBoost</enumerator>
            <enumerator value="0x01000074">Key_BassUp</enumerator>
            <enumerator value="0x01000075">Key_BassDown</enumerator>
            <enumerator value="0x01000076">Key_TrebleUp</enumerator>
            <enumerator value="0x01000077">Key_TrebleDown</enumerator>
            <enumerator value="0x01000080">Key_MediaPlay</enumerator>
            <enumerator value="0x01000081">Key_MediaStop</enumerator>
            <enumerator value="0x01000082">Key_MediaPrevious</enumerator>
            <enumerator value="0x01000083">Key_MediaNext</enumerator>
            <enumerator value="0x01000084">Key_MediaRecord</enumerator>
            <enumerator value="0x1000085">Key_MediaPause</enumerator>
            <enumerator value="0x1000086">Key_MediaTogglePlayPause</enumerator>
            <enumerator value="0x01000090">Key_HomePage</enumerator>
            <enumerator value="0x01000091">Key_Favorites</enumerator>
            <enumerator value="0x01000092">Key_Search</enumerator>
            <enumerator value="0x01000093">Key_Standby</enumerator>
            <enumerator value="0x01000094">Key_OpenUrl</enumerator>
            <enumerator value="0x010000a0">Key_LaunchMail</enumerator>
            <enumerator value="0x010000a1">Key_LaunchMedia</enumerator>
            <enumerator value="0x010000a2">Key_Launch0</enumerator>
            <enumerator value="0x010000a3">Key_Launch1</enumerator>
            <enumerator value="0x010000a4">Key_Launch2</enumerator>
            <enumerator value="0x010000a5">Key_Launch3</enumerator>
            <enumerator value="0x010000a6">Key_Launch4</enumerator>
            <enumerator value="0x010000a7">Key_Launch5</enumerator>
            <enumerator value="0x010000a8">Key_Launch6</enumerator>
            <enumerator value="0x010000a9">Key_Launch7</enumerator>
            <enumerator value="0x010000aa">Key_Launch8</enumerator>
            <enumerator value="0x010000ab">Key_Launch9</enumerator>
            <enumerator value="0x010000ac">Key_LaunchA</enumerator>
            <enumerator value="0x010000ad">Key_LaunchB</enumerator>
            <enumerator value="0x010000ae">Key_LaunchC</enumerator>
            <enumerator value="0x010000af">Key_LaunchD</enumerator>
            <enumerator value="0x010000b0">Key_LaunchE</enumerator>
            <enumerator value="0x010000b1">Key_LaunchF</enumerator>
            <enumerator value="0x010000b2">Key_MonBrightnessUp</enumerator>
            <enumerator value="0x010000b3">Key_MonBrightnessDown</enumerator>
            <enumerator value="0x010000b4">Key_KeyboardLightOnOff</enumerator>
            <enumerator value="0x010000b5">Key_KeyboardBrightnessUp</enumerator>
            <enumerator value="0x010000b6">Key_KeyboardBrightnessDown</enumerator>
            <enumerator value="0x010000b7">Key_PowerOff</enumerator>
            <enumerator value="0x010000b8">Key_WakeUp</enumerator>
            <enumerator value="0x010000b9">Key_Eject</enumerator>
            <enumerator value="0x010000ba">Key_ScreenSaver</enumerator>
            <enumerator value="0x010000bb">Key_WWW</enumerator>
            <enumerator value="0x010000bc">Key_Memo</enumerator>
            <enumerator value="0x010000bd">Key_LightBulb</enumerator>
            <enumerator value="0x010000be">Key_Shop</enumerator>
            <enumerator value="0x010000bf">Key_History</enumerator>
            <enumerator value="0x010000c0">Key_AddFavorite</enumerator>
            <enumerator value="0x010000c1">Key_HotLinks</enumerator>
            <enumerator value="0x010000c2">Key_BrightnessAdjust</enumerator>
            <enumerator value="0x010000c3">Key_Finance</enumerator>
            <enumerator value="0x010000c4">Key_Community</enumerator>
            <enumerator value="0x010000c5">Key_AudioRewind</enumerator>
            <enumerator value="0x010000c6">Key_BackForward</enumerator>
            <enumerator value="0x010000c7">Key_ApplicationLeft</enumerator>
            <enumerator value="0x010000c8">Key_ApplicationRight</enumerator>
            <enumerator value="0x010000c9">Key_Book</enumerator>
            <enumerator value="0x010000ca">Key_CD</enumerator>
            <enumerator value="0x010000cb">Key_Calculator</enumerator>
            <enumerator value="0x010000cc">Key_ToDoList</enumerator>
            <enumerator value="0x010000cd">Key_ClearGrab</enumerator>
            <enumerator value="0x010000ce">Key_Close</enumerator>
            <enumerator value="0x010000cf">Key_Copy</enumerator>
            <enumerator value="0x010000d0">Key_Cut</enumerator>
            <enumerator value="0x010000d1">Key_Display</enumerator>
            <enumerator value="0x010000d2">Key_DOS</enumerator>
            <enumerator value="0x010000d3">Key_Documents</enumerator>
            <enumerator value="0x010000d4">Key_Excel</enumerator>
            <enumerator value="0x010000d5">Key_Explorer</enumerator>
            <enumerator value="0x010000d6">Key_Game</enumerator>
            <enumerator value="0x010000d7">Key_Go</enumerator>
            <enumerator value="0x010000d8">Key_iTouch</enumerator>
            <enumerator value="0x010000d9">Key_LogOff</enumerator>
            <enumerator value="0x010000da">Key_Market</enumerator>
            <enumerator value="0x010000db">Key_Meeting</enumerator>
            <enumerator value="0x010000dc">Key_MenuKB</enumerator>
            <enumerator value="0x010000dd">Key_MenuPB</enumerator>
            <enumerator value="0x010000de">Key_MySites</enumerator>
            <enumerator value="0x010000df">Key_News</enumerator>
            <enumerator value="0x010000e0">Key_OfficeHome</enumerator>
            <enumerator value="0x010000e1">Key_Option</enumerator>
            <enumerator value="0x010000e2">Key_Paste</enumerator>
            <enumerator value="0x010000e3">Key_Phone</enumerator>
            <enumerator value="0x010000e4">Key_Calendar</enumerator>
            <enumerator value="0x010000e5">Key_Reply</enumerator>
            <enumerator value="0x010000e6">Key_Reload</enumerator>
            <enumerator value="0x010000e7">Key_RotateWindows</enumerator>
            <enumerator value="0x010000e8">Key_RotationPB</enumerator>
            <enumerator value="0x010000e9">Key_RotationKB</enumerator>
            <enumerator value="0x010000ea">Key_Save</enumerator>
            <enumerator value="0x010000eb">Key_Send</enumerator>
            <enumerator value="0x010000ec">Key_Spell</enumerator>
            <enumerator value="0x010000ed">Key_SplitScreen</enumerator>
            <enumerator value="0x010000ee">Key_Support</enumerator>
            <enumerator value="0x010000ef">Key_TaskPane</enumerator>
            <enumerator value="0x010000f0">Key_Terminal</enumerator>
            <enumerator value="0x010000f1">Key_Tools</enumerator>
            <enumerator value="0x010000f2">Key_Travel</enumerator>
            <enumerator value="0x010000f3">Key_Video</enumerator>
            <enumerator value="0x010000f4">Key_Word</enumerator>
            <enumerator value="0x010000f5">Key_Xfer</enumerator>
            <enumerator value="0x010000f6">Key_ZoomIn</enumerator>
            <enumerator value="0x010000f7">Key_ZoomOut</enumerator>
            <enumerator value="0x010000f8">Key_Away</enumerator>
            <enumerator value="0x010000f9">Key_Messenger</enumerator>
            <enumerator value="0x010000fa">Key_WebCam</enumerator>
            <enumerator value="0x010000fb">Key_MailForward</enumerator>
            <enumerator value="0x010000fc">Key_Pictures</enumerator>
            <enumerator value="0x010000fd">Key_Music</enumerator>
            <enumerator value="0x010000fe">Key_Battery</enumerator>
            <enumerator value="0x010000ff">Key_Bluetooth</enumerator>
            <enumerator value="0x01000100">Key_WLAN</enumerator>
            <enumerator value="0x01000101">Key_UWB</enumerator>
            <enumerator value="0x01000102">Key_AudioForward</enumerator>
            <enumerator value="0x01000103">Key_AudioRepeat</enumerator>
            <enumerator value="0x01000104">Key_AudioRandomPlay</enumerator>
            <enumerator value="0x01000105">Key_Subtitle</enumerator>
            <enumerator value="0x01000106">Key_AudioCycleTrack</enumerator>
            <enumerator value="0x01000107">Key_Time</enumerator>
            <enumerator value="0x01000108">Key_Hibernate</enumerator>
            <enumerator value="0x01000109">Key_View</enumerator>
            <enumerator value="0x0100010a">Key_TopMenu</enumerator>
            <enumerator value="0x0100010b">Key_PowerDown</enumerator>
            <enumerator value="0x0100010c">Key_Suspend</enumerator>
            <enumerator value="0x0100010d">Key_ContrastAdjust</enumerator>
            <enumerator value="0x0100010e">Key_LaunchG</enumerator>
            <enumerator value="0x0100010f">Key_LaunchH</enumerator>
            <enumerator value="0x01000110">Key_TouchpadToggle</enumerator>
            <enumerator value="0x01000111">Key_TouchpadOn</enumerator>
            <enumerator value="0x01000112">Key_TouchpadOff</enumerator>
            <enumerator value="0x0100ffff">Key_MediaLast</enumerator>
            <enumerator value="0x01010000">Key_Select</enumerator>
            <enumerator value="0x01010001">Key_Yes</enumerator>
            <enumerator value="0x01010002">Key_No</enumerator>
            <enumerator value="0x01020001">Key_Cancel</enumerator>
            <enumerator value="0x01020002">Key_Printer</enumerator>
            <enumerator value="0x01020003">Key_Execute</enumerator>
            <enumerator value="0x01020004">Key_Sleep</enumerator>
            <enumerator value="0x01020005">Key_Play</enumerator>
            <enumerator value="0x01020006">Key_Zoom</enumerator>
            <enumerator value="0x01100000">Key_Context1</enumerator>
            <enumerator value="0x01100001">Key_Context2</enumerator>
            <enumerator value="0x01100002">Key_Context3</enumerator>
            <enumerator value="0x01100003">Key_Context4</enumerator>
            <enumerator value="0x01100004">Key_Call</enumerator>
            <enumerator value="0x01100005">Key_Hangup</enumerator>
            <enumerator value="0x01100006">Key_Flip</enumerator>
            <enumerator value="0x01100007">Key_ToggleCallHangup</enumerator>
            <enumerator value="0x01100008">Key_VoiceDial</enumerator>
            <enumerator value="0x01100009">Key_LastNumberRedial</enumerator>
            <enumerator value="0x01100020">Key_Camera</enumerator>
            <enumerator value="0x01100021">Key_CameraFocus</enumerator>
            <enumerator value="0x01ffffff">Key_unknown</enumerator>
        </enum>
    </namespace>
    <class name="QAbstractItemView">
        <inherits >
            <class name="QAbstractScrollArea"/>
        </inherits>
        <enum name="QAbstractItemView::DragDropMode">
            <accessPolicy value="public"/>
            <enumerator >NoDragDrop</enumerator>
            <enumerator >DragOnly</enumerator>
            <enumerator >DropOnly</enumerator>
            <enumerator >DragDrop</enumerator>
            <enumerator >InternalMove</enumerator>
        </enum>
        <enum name="QAbstractItemView::SelectionBehavior">
            <accessPolicy value="public"/>
            <enumerator >SelectItems</enumerator>
            <enumerator >SelectRows</enumerator>
            <enumerator >SelectColumns</enumerator>
        </enum>
        <enum name="QAbstractItemView::ScrollMode">
            <accessPolicy value="public"/>
            <enumerator >ScrollPerItem</enumerator>
            <enumerator >ScrollPerPixel</enumerator>
        </enum>
        <enum name="QAbstractItemView::CursorAction">
            <accessPolicy value="protected"/>
            <enumerator >MoveUp</enumerator>
            <enumerator >MoveDown</enumerator>
            <enumerator >MoveLeft</enumerator>
            <enumerator >MoveRight</enumerator>
            <enumerator >MoveHome</enumerator>
            <enumerator >MoveEnd</enumerator>
            <enumerator >MovePageUp</enumerator>
            <enumerator >MovePageDown</enumerator>
            <enumerator >MoveNext</enumerator>
            <enumerator >MovePrevious</enumerator>
        </enum>
        <enum name="QAbstractItemView::DropIndicatorPosition">
            <accessPolicy value="protected"/>
            <enumerator >OnItem</enumerator>
            <enumerator >AboveItem</enumerator>
            <enumerator >BelowItem</enumerator>
            <enumerator >OnViewport</enumerator>
        </enum>
        <enum name="QAbstractItemView::ScrollHint">
            <accessPolicy value="public"/>
            <enumerator >EnsureVisible</enumerator>
            <enumerator >PositionAtTop</enumerator>
            <enumerator >PositionAtBottom</enumerator>
            <enumerator >PositionAtCenter</enumerator>
        </enum>
        <enum name="QAbstractItemView::SelectionMode">
            <accessPolicy value="public"/>
            <enumerator >NoSelection</enumerator>
            <enumerator >SingleSelection</enumerator>
            <enumerator >MultiSelection</enumerator>
            <enumerator >ExtendedSelection</enumerator>
            <enumerator >ContiguousSelection</enumerator>
        </enum>
        <enum name="QAbstractItemView::State">
            <accessPolicy value="protected"/>
            <enumerator >NoState</enumerator>
            <enumerator >DraggingState</enumerator>
            <enumerator >DragSelectingState</enumerator>
            <enumerator >EditingState</enumerator>
            <enumerator >ExpandingState</enumerator>
            <enumerator >CollapsingState</enumerator>
            <enumerator >AnimatingState</enumerator>
        </enum>
        <slot name="horizontalScrollbarAction" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="verticalOffset" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments />
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="rowsInserted" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="closePersistentEditor" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="currentChanged" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="defaultDropAction" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="Qt::DropAction" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="pressed" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="visualRect" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QRect" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="commitData" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="setRootIndex" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="closeEditor" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QAbstractItemDelegate::EndEditHint" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="selectionChanged" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QItemSelection" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QItemSelection" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <signal name="doubleClicked" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <slot name="scrollToBottom" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="rowsAboutToBeRemoved" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="updateEditorData" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="moveCursor" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QAbstractItemView::CursorAction" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="scrollToTop" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="horizontalScrollbarValueChanged" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="reset" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="updateEditorGeometries" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="currentIndex" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="setCurrentIndex" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="isIndexHidden" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="editorDestroyed" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="doItemsLayout" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="keyPressEvent" declaredIn="QAbstractItemView">
            <modifiers />
            <arguments >
                <argument type="QKeyEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="activated" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="setSelection" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QRect" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QItemSelectionModel::SelectionFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="horizontalOffset" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments />
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="verticalScrollbarAction" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="update" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="update" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="setModel" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QAbstractItemModel" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="verticalScrollbarValueChanged" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="model" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QAbstractItemModel" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="scrollTo" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="EnsureVisible" type="QAbstractItemView::ScrollHint" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="indexAt" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QPoint" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="dataChanged" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QVector&lt;int&gt;()" type="QVector&lt;int&gt;" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="updateGeometries" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="selectAll" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <constructor name="QAbstractItemView" declaredIn="QAbstractItemView">
            <modifiers />
            <arguments >
                <argument type="QAbstractItemView" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractItemView" declaredIn="QAbstractItemView">
            <modifiers />
            <arguments >
                <argument type="QAbstractItemViewPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractItemView" declaredIn="QAbstractItemView">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="visualRegionForSelection" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QItemSelection" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QRegion" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="clicked" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="entered" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="viewportEntered" declaredIn="QAbstractItemView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <property name="autoScroll">
            <read value="hasAutoScroll"/>
            <write value="setAutoScroll"/>
        </property>
        <property name="autoScrollMargin">
            <read value="autoScrollMargin"/>
            <write value="setAutoScrollMargin"/>
        </property>
        <property name="editTriggers">
            <read value="editTriggers"/>
            <write value="setEditTriggers"/>
        </property>
        <property name="tabKeyNavigation">
            <read value="tabKeyNavigation"/>
            <write value="setTabKeyNavigation"/>
        </property>
        <property name="showDropIndicator">
            <read value="showDropIndicator"/>
            <write value="setDropIndicatorShown"/>
        </property>
        <property name="dragEnabled">
            <read value="dragEnabled"/>
            <write value="setDragEnabled"/>
        </property>
        <property name="dragDropOverwriteMode">
            <read value="dragDropOverwriteMode"/>
            <write value="setDragDropOverwriteMode"/>
        </property>
        <property name="dragDropMode">
            <read value="dragDropMode"/>
            <write value="setDragDropMode"/>
        </property>
        <property name="defaultDropAction">
            <read value="defaultDropAction"/>
            <write value="setDefaultDropAction"/>
        </property>
        <property name="alternatingRowColors">
            <read value="alternatingRowColors"/>
            <write value="setAlternatingRowColors"/>
        </property>
        <property name="selectionMode">
            <read value="selectionMode"/>
            <write value="setSelectionMode"/>
        </property>
        <property name="selectionBehavior">
            <read value="selectionBehavior"/>
            <write value="setSelectionBehavior"/>
        </property>
        <property name="iconSize">
            <read value="iconSize"/>
            <write value="setIconSize"/>
        </property>
        <property name="textElideMode">
            <read value="textElideMode"/>
            <write value="setTextElideMode"/>
        </property>
        <property name="verticalScrollMode">
            <read value="verticalScrollMode"/>
            <write value="setVerticalScrollMode"/>
        </property>
        <property name="horizontalScrollMode">
            <read value="horizontalScrollMode"/>
            <write value="setHorizontalScrollMode"/>
        </property>
    </class>
    <class name="QFrame">
        <inherits >
            <class name="QWidget"/>
        </inherits>
        <constructor name="QFrame" declaredIn="QFrame">
            <modifiers />
            <arguments >
                <argument type="QFrame" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QFrame" declaredIn="QFrame">
            <modifiers />
            <arguments >
                <argument type="QFramePrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="Qt::WindowFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QFrame" declaredIn="QFrame">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="Qt::WindowFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="paintEvent" declaredIn="QFrame">
            <modifiers />
            <arguments >
                <argument type="QPaintEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <property name="frameShape">
            <read value="frameShape"/>
            <write value="setFrameShape"/>
        </property>
        <property name="frameShadow">
            <read value="frameShadow"/>
            <write value="setFrameShadow"/>
        </property>
        <property name="lineWidth">
            <read value="lineWidth"/>
            <write value="setLineWidth"/>
        </property>
        <property name="midLineWidth">
            <read value="midLineWidth"/>
            <write value="setMidLineWidth"/>
        </property>
        <property name="frameWidth">
            <read value="frameWidth"/>
        </property>
        <property name="frameRect">
            <read value="frameRect"/>
            <write value="setFrameRect"/>
            <designable value="false"/>
        </property>
    </class>
    <class name="QListView">
        <inherits >
            <class name="QAbstractItemView"/>
        </inherits>
        <enum name="QListView::ResizeMode">
            <accessPolicy value="public"/>
            <enumerator >Fixed</enumerator>
            <enumerator >Adjust</enumerator>
        </enum>
        <enum name="QListView::LayoutMode">
            <accessPolicy value="public"/>
            <enumerator >SinglePass</enumerator>
            <enumerator >Batched</enumerator>
        </enum>
        <enum name="QListView::ViewMode">
            <accessPolicy value="public"/>
            <enumerator >ListMode</enumerator>
            <enumerator >IconMode</enumerator>
        </enum>
        <enum name="QListView::Flow">
            <accessPolicy value="public"/>
            <enumerator >LeftToRight</enumerator>
            <enumerator >TopToBottom</enumerator>
        </enum>
        <enum name="QListView::Movement">
            <accessPolicy value="public"/>
            <enumerator >Static</enumerator>
            <enumerator >Free</enumerator>
            <enumerator >Snap</enumerator>
        </enum>
        <function name="contentsSize" declaredIn="QListView">
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QSize" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="mouseReleaseEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QMouseEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="horizontalOffset" declaredIn="QListView">
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="layoutMode" declaredIn="QListView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QListView::LayoutMode" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="visualRegionForSelection" declaredIn="QListView">
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QItemSelection" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QRegion" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QListView" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QListView" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QListView" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QListViewPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QListView" declaredIn="QListView">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="isIndexHidden" declaredIn="QListView">
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="resizeEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QResizeEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dropEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QDropEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dragMoveEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QDragMoveEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="mouseMoveEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QMouseEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="flow" declaredIn="QListView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QListView::Flow" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dragLeaveEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QDragLeaveEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dataChanged" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QVector&lt;int&gt;()" type="QVector&lt;int&gt;" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="paintEvent" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QPaintEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="gridSize" declaredIn="QListView">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QSize" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="indexesMoved" declaredIn="QListView">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndexList" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="setSelection" declaredIn="QListView">
            <modifiers />
            <arguments >
                <argument type="QRect" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QItemSelectionModel::SelectionFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <property name="movement">
            <read value="movement"/>
            <write value="setMovement"/>
        </property>
        <property name="flow">
            <read value="flow"/>
            <write value="setFlow"/>
        </property>
        <property name="isWrapping">
            <read value="isWrapping"/>
            <write value="setWrapping"/>
        </property>
        <property name="resizeMode">
            <read value="resizeMode"/>
            <write value="setResizeMode"/>
        </property>
        <property name="layoutMode">
            <read value="layoutMode"/>
            <write value="setLayoutMode"/>
        </property>
        <property name="spacing">
            <read value="spacing"/>
            <write value="setSpacing"/>
        </property>
        <property name="gridSize">
            <read value="gridSize"/>
            <write value="setGridSize"/>
        </property>
        <property name="viewMode">
            <read value="viewMode"/>
            <write value="setViewMode"/>
        </property>
        <property name="modelColumn">
            <read value="modelColumn"/>
            <write value="setModelColumn"/>
        </property>
        <property name="uniformItemSizes">
            <read value="uniformItemSizes"/>
            <write value="setUniformItemSizes"/>
        </property>
        <property name="batchSize">
            <read value="batchSize"/>
            <write value="setBatchSize"/>
        </property>
        <property name="wordWrap">
            <read value="wordWrap"/>
            <write value="setWordWrap"/>
        </property>
        <property name="selectionRectVisible">
            <read value="isSelectionRectVisible"/>
            <write value="setSelectionRectVisible"/>
        </property>
    </class>
    <class name="QAbstractListModel">
        <inherits >
            <class name="QAbstractItemModel"/>
        </inherits>
        <function name="hasChildren" declaredIn="QAbstractListModel">
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="index" declaredIn="QAbstractListModel">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QModelIndex()" type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="parent" declaredIn="QAbstractListModel">
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QAbstractListModel" declaredIn="QAbstractListModel">
            <modifiers />
            <arguments >
                <argument type="QAbstractListModel" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractListModel" declaredIn="QAbstractListModel">
            <modifiers />
            <arguments >
                <argument type="QAbstractItemModelPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractListModel" declaredIn="QAbstractListModel">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="columnCount" declaredIn="QAbstractListModel">
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
    </class>
    <class name="QAbstractScrollArea">
        <inherits >
            <class name="QFrame"/>
        </inherits>
        <function name="setVerticalScrollBarPolicy" declaredIn="QAbstractScrollArea">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="Qt::ScrollBarPolicy" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QAbstractScrollArea" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QAbstractScrollArea" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractScrollArea" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QAbstractScrollAreaPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractScrollArea" declaredIn="QAbstractScrollArea">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="mouseDoubleClickEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QMouseEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dragEnterEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QDragEnterEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="dragMoveEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QDragMoveEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="paintEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QPaintEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="resizeEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QResizeEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="eventFilter" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="keyPressEvent" declaredIn="QAbstractScrollArea">
            <modifiers />
            <arguments >
                <argument type="QKeyEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <property name="verticalScrollBarPolicy">
            <read value="verticalScrollBarPolicy"/>
            <write value="setVerticalScrollBarPolicy"/>
        </property>
        <property name="horizontalScrollBarPolicy">
            <read value="horizontalScrollBarPolicy"/>
            <write value="setHorizontalScrollBarPolicy"/>
        </property>
    </class>
    <class name="QKeyEvent">
        <inherits >
            <class name="QInputEvent"/>
        </inherits>
        <function name="nativeVirtualKey" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="isAutoRepeat" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="key" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="count" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QKeyEvent" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QEvent::Type" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QString()" type="QString" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="false" type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="1" type="ushort" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QKeyEvent" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QEvent::Type" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QString()" type="QString" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="false" type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="1" type="ushort" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="modifiers" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="matches" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments >
                <argument type="QKeySequence::StandardKey" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="nativeModifiers" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="text" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="QString" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="nativeScanCode" declaredIn="QKeyEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="quint32" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
    </class>
    <class name="QEvent">
        <inherits />
        <function name="spontaneous" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="ignore" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="accept" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="registerEventType" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <static />
            </modifiers>
            <arguments >
                <argument default="-1" type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QEvent" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QEvent" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QEvent" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument type="QEvent::Type" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="type" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="QEvent::Type" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="setAccepted" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments >
                <argument type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="isAccepted" declaredIn="QEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
    </class>
    <class name="QInputEvent">
        <inherits >
            <class name="QEvent"/>
        </inherits>
        <function name="setModifiers" declaredIn="QInputEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments >
                <argument type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="setTimestamp" declaredIn="QInputEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <inline />
            </modifiers>
            <arguments >
                <argument type="ulong" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QInputEvent" declaredIn="QInputEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument type="QEvent::Type" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="Qt::NoModifier" type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="modifiers" declaredIn="QInputEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="Qt::KeyboardModifiers" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="timestamp" declaredIn="QInputEvent">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="ulong" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
    </class>
    <class name="QObject">
        <inherits />
        <signal name="destroyed" declaredIn="QObject">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="isWindowType" declaredIn="QObject">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <inline />
            </modifiers>
            <arguments />
            <return type="bool" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="setParent" declaredIn="QObject">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QObject" declaredIn="QObject">
            <modifiers />
            <arguments >
                <argument type="QObject" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QObject" declaredIn="QObject">
            <modifiers />
            <arguments >
                <argument type="QObjectPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QObject" declaredIn="QObject">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
                <invokable />
            </modifiers>
            <arguments >
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <signal name="objectNameChanged" declaredIn="QObject">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QString" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <property name="objectName">
            <read value="objectName"/>
            <write value="setObjectName"/>
        </property>
    </class>
    <class name="QWidget">
        <inherits >
            <class name="QObject"/>
            <class name="QPaintDevice"/>
        </inherits>
        <enum name="QWidget::RenderFlag">
            <accessPolicy value="public"/>
            <enumerator value="0x1">DrawWindowBackground</enumerator>
            <enumerator value="0x2">DrawChildren</enumerator>
            <enumerator value="0x4">IgnoreMask</enumerator>
        </enum>
        <function name="find" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers >
                <static />
            </modifiers>
            <arguments >
                <argument type="WId" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="keyReleaseEvent" declaredIn="QWidget">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QKeyEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="customContextMenuRequested" declaredIn="QWidget">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QPoint" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="setParent" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="Qt::WindowFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="setParent" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="updateGeometry" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <slot name="showFullScreen" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="keyPressEvent" declaredIn="QWidget">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QKeyEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QWidget" declaredIn="QWidget">
            <modifiers />
            <arguments >
                <argument type="QWidget" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QWidget" declaredIn="QWidget">
            <modifiers />
            <arguments >
                <argument type="QWidgetPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="Qt::WindowFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QWidget" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QWidget" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="Qt::WindowFlags" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <slot name="show" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments />
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <slot name="setWindowTitle" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers />
            <arguments >
                <argument type="QString" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </slot>
        <function name="paintEngine" declaredIn="QWidget">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
            </modifiers>
            <arguments />
            <return type="QPaintEngine" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <function name="mouseDoubleClickEvent" declaredIn="QWidget">
            <accessPolicy value="protected"/>
            <modifiers >
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QMouseEvent" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <property name="modal">
            <read value="isModal"/>
        </property>
        <property name="windowModality">
            <read value="windowModality"/>
            <write value="setWindowModality"/>
        </property>
        <property name="enabled">
            <read value="isEnabled"/>
            <write value="setEnabled"/>
        </property>
        <property name="geometry">
            <read value="geometry"/>
            <write value="setGeometry"/>
        </property>
        <property name="frameGeometry">
            <read value="frameGeometry"/>
        </property>
        <property name="normalGeometry">
            <read value="normalGeometry"/>
        </property>
        <property name="x">
            <read value="x"/>
        </property>
        <property name="y">
            <read value="y"/>
        </property>
        <property name="pos">
            <read value="pos"/>
            <write value="move"/>
            <designable value="false"/>
        </property>
        <property name="frameSize">
            <read value="frameSize"/>
        </property>
        <property name="size">
            <read value="size"/>
            <write value="resize"/>
            <designable value="false"/>
        </property>
        <property name="width">
            <read value="width"/>
        </property>
        <property name="height">
            <read value="height"/>
        </property>
        <property name="rect">
            <read value="rect"/>
        </property>
        <property name="childrenRect">
            <read value="childrenRect"/>
        </property>
        <property name="childrenRegion">
            <read value="childrenRegion"/>
        </property>
        <property name="sizePolicy">
            <read value="sizePolicy"/>
            <write value="setSizePolicy"/>
        </property>
        <property name="minimumSize">
            <read value="minimumSize"/>
            <write value="setMinimumSize"/>
        </property>
        <property name="maximumSize">
            <read value="maximumSize"/>
            <write value="setMaximumSize"/>
        </property>
        <property name="minimumWidth">
            <read value="minimumWidth"/>
            <write value="setMinimumWidth"/>
            <designable value="false"/>
        </property>
        <property name="minimumHeight">
            <read value="minimumHeight"/>
            <write value="setMinimumHeight"/>
            <designable value="false"/>
        </property>
        <property name="maximumWidth">
            <read value="maximumWidth"/>
            <write value="setMaximumWidth"/>
            <designable value="false"/>
        </property>
        <property name="maximumHeight">
            <read value="maximumHeight"/>
            <write value="setMaximumHeight"/>
            <designable value="false"/>
        </property>
        <property name="sizeIncrement">
            <read value="sizeIncrement"/>
            <write value="setSizeIncrement"/>
        </property>
        <property name="baseSize">
            <read value="baseSize"/>
            <write value="setBaseSize"/>
        </property>
        <property name="palette">
            <read value="palette"/>
            <write value="setPalette"/>
        </property>
        <property name="font">
            <read value="font"/>
            <write value="setFont"/>
        </property>
        <property name="cursor">
            <read value="cursor"/>
            <write value="setCursor"/>
            <reset value="unsetCursor"/>
        </property>
        <property name="mouseTracking">
            <read value="hasMouseTracking"/>
            <write value="setMouseTracking"/>
        </property>
        <property name="isActiveWindow">
            <read value="isActiveWindow"/>
        </property>
        <property name="focusPolicy">
            <read value="focusPolicy"/>
            <write value="setFocusPolicy"/>
        </property>
        <property name="focus">
            <read value="hasFocus"/>
        </property>
        <property name="contextMenuPolicy">
            <read value="contextMenuPolicy"/>
            <write value="setContextMenuPolicy"/>
        </property>
        <property name="updatesEnabled">
            <read value="updatesEnabled"/>
            <write value="setUpdatesEnabled"/>
            <designable value="false"/>
        </property>
        <property name="visible">
            <read value="isVisible"/>
            <write value="setVisible"/>
            <designable value="false"/>
        </property>
        <property name="minimized">
            <read value="isMinimized"/>
        </property>
        <property name="maximized">
            <read value="isMaximized"/>
        </property>
        <property name="fullScreen">
            <read value="isFullScreen"/>
        </property>
        <property name="sizeHint">
            <read value="sizeHint"/>
        </property>
        <property name="minimumSizeHint">
            <read value="minimumSizeHint"/>
        </property>
        <property name="acceptDrops">
            <read value="acceptDrops"/>
            <write value="setAcceptDrops"/>
        </property>
        <property name="windowTitle">
            <read value="windowTitle"/>
            <write value="setWindowTitle"/>
            <designable value="isWindow"/>
        </property>
        <property name="windowIcon">
            <read value="windowIcon"/>
            <write value="setWindowIcon"/>
            <designable value="isWindow"/>
        </property>
        <property name="windowIconText">
            <read value="windowIconText"/>
            <write value="setWindowIconText"/>
            <designable value="isWindow"/>
        </property>
        <property name="windowOpacity">
            <read value="windowOpacity"/>
            <write value="setWindowOpacity"/>
            <designable value="isWindow"/>
        </property>
        <property name="windowModified">
            <read value="isWindowModified"/>
            <write value="setWindowModified"/>
            <designable value="isWindow"/>
        </property>
        <property name="toolTip">
            <read value="toolTip"/>
            <write value="setToolTip"/>
        </property>
        <property name="statusTip">
            <read value="statusTip"/>
            <write value="setStatusTip"/>
        </property>
        <property name="whatsThis">
            <read value="whatsThis"/>
            <write value="setWhatsThis"/>
        </property>
        <property name="accessibleName">
            <read value="accessibleName"/>
            <write value="setAccessibleName"/>
        </property>
        <property name="accessibleDescription">
            <read value="accessibleDescription"/>
            <write value="setAccessibleDescription"/>
        </property>
        <property name="layoutDirection">
            <read value="layoutDirection"/>
            <write value="setLayoutDirection"/>
            <reset value="unsetLayoutDirection"/>
        </property>
        <property name="autoFillBackground">
            <read value="autoFillBackground"/>
            <write value="setAutoFillBackground"/>
        </property>
        <property name="styleSheet">
            <read value="styleSheet"/>
            <write value="setStyleSheet"/>
        </property>
        <property name="locale">
            <read value="locale"/>
            <write value="setLocale"/>
            <reset value="unsetLocale"/>
        </property>
        <property name="windowFilePath">
            <read value="windowFilePath"/>
            <write value="setWindowFilePath"/>
            <designable value="isWindow"/>
        </property>
        <property name="inputMethodHints">
            <read value="inputMethodHints"/>
            <write value="setInputMethodHints"/>
        </property>
    </class>
    <class name="QAbstractItemModel">
        <inherits >
            <class name="QObject"/>
        </inherits>
        <enum name="QAbstractItemModel::LayoutChangeHint">
            <accessPolicy value="public"/>
            <enumerator >NoLayoutChangeHint</enumerator>
            <enumerator >VerticalSortHint</enumerator>
            <enumerator >HorizontalSortHint</enumerator>
        </enum>
        <signal name="columnsAboutToBeInserted" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="columnsAboutToBeRemoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="rowsInserted" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="modelAboutToBeReset" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="data" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="Qt::DisplayRole" type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QVariant" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="rowsAboutToBeRemoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="layoutChanged" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument default="QList&lt;QPersistentModelIndex&gt;()" type="QList&lt;QPersistentModelIndex&gt;" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QAbstractItemModel::NoLayoutChangeHint" type="QAbstractItemModel::LayoutChangeHint" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="modelReset" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="parent" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="columnsMoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="headerDataChanged" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="Qt::Orientation" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="rowCount" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument default="QModelIndex()" type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="rowsRemoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="rowsAboutToBeInserted" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="columnsRemoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <constructor name="QAbstractItemModel" declaredIn="QAbstractItemModel">
            <modifiers />
            <arguments >
                <argument type="QAbstractItemModel" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractItemModel" declaredIn="QAbstractItemModel">
            <modifiers />
            <arguments >
                <argument type="QAbstractItemModelPrivate" indirections="0" isReference="true" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QAbstractItemModel" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <explicit />
            </modifiers>
            <arguments >
                <argument default="0" type="QObject" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <function name="roleNames" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <const />
                <virtual />
            </modifiers>
            <arguments />
            <return type="QHash&lt;int,QByteArray&gt;" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="columnsAboutToBeMoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="columnsInserted" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="rowsAboutToBeMoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="dataChanged" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QVector&lt;int&gt;()" type="QVector&lt;int&gt;" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="columnCount" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument default="QModelIndex()" type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <signal name="rowsMoved" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="QPrivateSignal" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <signal name="layoutAboutToBeChanged" declaredIn="QAbstractItemModel">
            <accessPolicy value="protected"/>
            <modifiers />
            <arguments >
                <argument default="QList&lt;QPersistentModelIndex&gt;()" type="QList&lt;QPersistentModelIndex&gt;" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QAbstractItemModel::NoLayoutChangeHint" type="QAbstractItemModel::LayoutChangeHint" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="void" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </signal>
        <function name="index" declaredIn="QAbstractItemModel">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments >
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument type="int" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                    <arguments />
                </argument>
                <argument default="QModelIndex()" type="QModelIndex" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
            <return type="QModelIndex" indirections="0" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
    </class>
    <class name="QPaintDevice">
        <inherits />
        <enum name="QPaintDevice::PaintDeviceMetric">
            <accessPolicy value="public"/>
            <enumerator value="1">PdmWidth</enumerator>
            <enumerator >PdmHeight</enumerator>
            <enumerator >PdmWidthMM</enumerator>
            <enumerator >PdmHeightMM</enumerator>
            <enumerator >PdmNumColors</enumerator>
            <enumerator >PdmDepth</enumerator>
            <enumerator >PdmDpiX</enumerator>
            <enumerator >PdmDpiY</enumerator>
            <enumerator >PdmPhysicalDpiX</enumerator>
            <enumerator >PdmPhysicalDpiY</enumerator>
        </enum>
        <function name="paintEngine" declaredIn="QPaintDevice">
            <accessPolicy value="public"/>
            <modifiers >
                <abstract />
                <const />
                <virtual />
            </modifiers>
            <arguments />
            <return type="QPaintEngine" indirections="1" isReference="false" isConstant="false" isFunctionPointer="false">
                <arguments />
            </return>
        </function>
        <constructor name="QPaintDevice" declaredIn="QPaintDevice">
            <modifiers />
            <arguments >
                <argument type="QPaintDevice" indirections="0" isReference="true" isConstant="true" isFunctionPointer="false">
                    <arguments />
                </argument>
            </arguments>
        </constructor>
        <constructor name="QPaintDevice" declaredIn="QPaintDevice">
            <modifiers />
            <arguments />
        </constructor>
    </class>
</code>
