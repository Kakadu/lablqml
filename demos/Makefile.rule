include  $(shell ocamlfind c -where)/Makefile.config

ifeq ($(VERBOSE),1)
V=
else
V=@
endif

.SUFFIXES: .cmx .cmi .cmo .o .ml .cpp .c

null  :=
space := $(null) $(null)
comma := ,

PPX_QT ?= ppx_qt
OCAMLFIND_PACKAGES=lablqml
LABLQML_WHERE= `OCAMLPATH=../../lib/_build/bundle ocamlfind query lablqml`
# deferred expansion allows to update PACKAGES variable in parent makefiles
OCAML_COMMON_FLAGS=
OCAML_OPT_FLAGS=-thread
OCAML_C_FLAGS=-vmthread
OCAMLOPT=ocamlfind opt -package $(subst $(space),$(comma),$(OCAMLFIND_PACKAGES)) \
		$(OCAML_COMMON_FLAGS) $(OCAML_OPT_FLAGS)
OCAMLC  =ocamlfind   c -package $(subst $(space),$(comma),$(OCAMLFIND_PACKAGES)) \
		$(OCAML_COMMON_FLAGS) $(OCAML_OPT_FLAGS)

override CXXFLAGS=`pkg-config --cflags Qt5Quick` -fPIC -I`ocamlc -where` -std=c++11

QT_MODULES=Qt5Quick Qt5Widgets
LDLIBS += $(shell pkg-config --libs-only-l   $(QT_MODULES) ) -lstdc++

LDFLAGS+= $(shell pkg-config --libs-only-L     $(QT_MODULES))
LDFLAGS+= $(shell pkg-config --libs-only-other $(QT_MODULES))
ML_LDFLAGS = $(addprefix -ccopt ,$(LDFLAGS))
ML_LDLIBS  = $(addprefix -cclib ,$(LDLIBS) )

define MAKE_RULES0
GENERATED_H += $(1).h
GENERATED_SOURCES += $(1)_c.cpp
GENERATED_CMX += $(1).cmx
GENERATED_CPP += $(1)_c.o
GENERATED_MOC += moc_$(1).o
GENERATED_OBJS += moc_$(1).o $(1)_c.o
$(1).h: $(1).ml
	$(V)PATH=../../ppx/:$$$$PATH OCAMLPATH=../../lib/_build/bundle \
	$(OCAMLOPT) -c -ppx "$(PPX_QT) --as-ppx -destdir . -ext cpp" $(1).ml

$(1).cmx: $(1).ml
	$(V)PATH=../../ppx/:$$$$PATH OCAMLPATH=../../lib/_build/bundle \
	$(OCAMLOPT) -c -ppx "$(PPX_QT) --as-ppx -nocpp" $(1).ml

$(1)_c.o: $(1)_c.cpp
	$(V)$(CXX) $(CXXFLAGS) -Dprotected=public -I`ocamlfind c -where` \
	-c $(1)_c.cpp -o $(1)_c.o

moc_$(1).o: moc_$(1).cpp
	$(V)$(CXX) $(CXXFLAGS) -I`ocamlfind c -where` -c moc_$(1).cpp -o moc_$(1).o

moc_$(1).cpp: $(1).h
	$(V)moc $(1).h -o moc_$(1).cpp

clean::
	$(RM) moc_$(1).cpp $(1)_c.cpp $(1).h
endef

#GEN_TARGETS=controller abstractModel dataItem
#$(foreach i,$(GEN_TARGETS),$(eval $(call MAKE_RULES0,$(i)) ) )

#specify a list of file names (without extension)
define MAKE_RULES
$(foreach i,$(1),$(eval $(call MAKE_RULES0,$(i)) ) )
endef
