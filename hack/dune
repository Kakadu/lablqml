(env
 (dev
  (flags
   (:standard -warn-error -A -w -32))))

(copy_files ui/Root.qml)

(library
 (name mystubs_dune_hack)
 (modules)
 (foreign_stubs
  (language cxx)
  (names Singleton1_c moc_Singleton1_c myslider_c moc_myslider_c)
  (flags
   ((:include %{project_root}/config/c_flags.sexp)
    -fPIC
    -std=c++11
    -I.
    -O3)))
 (install_c_headers Singleton1))

(executable
 (name program)
 (libraries lablqml threads mystubs_dune_hack)
 (modules Program MyControls)
 (flags
  (:standard -w -33-27))
 (preprocess
  (per_module
   ((pps lablqml.ppx)
    MyControls)))
 (foreign_stubs
  (language cxx)
  (names qrc_resources proj2_qmltyperegistrations)
  ;; TODO: It iseems dune doesn't know about these two dependecies
  (flags
   ((:include %{project_root}/config/c_flags.sexp)
    -fPIC
    -std=c++11
    -O3)))
 (link_flags
  (-ccopt
   -Wl,-no-as-needed
   -ccopt
   -fPIC
   -cclib
   -lstdc++
   (:include %{project_root}/config/ocaml_qt_libs.sexp)
   -cclib
   -llablqml_stubs)))

(rule
 (targets proj2_qmltyperegistrations.cpp)
 (deps proj2_metatypes.json)
 (action
  (run
   qmltyperegistrar
   --generate-qmltypes=proj2.qmltypes
   %{read:config/import_name_my_namespace.sexp}
   --major-version=1
   --minor-version=0
   %{read:../config/qml_foreign_types.sexp}
   %{deps}
   -o
   %{targets})))

(rule
 (target proj2_metatypes.json)
 (deps moc_Singleton1_c.cpp.json)
 (action
  (run
   moc
   %{read:../config/I_QT_INSTALL_HEADERS.sexp}
   --collect-json
   %{deps}
   -o
   %{target})))

(rule
 (targets moc_Singleton1_c.cpp moc_Singleton1_c.cpp.json)
 (deps Singleton1.h)
 ;(enabled_if
 ; (>= %{read:QT_VERSION.sexp} 5.15))    ;; Doesn't work
 (action
  (run
   moc
   %{read:../config/I_QT_INSTALL_HEADERS.sexp}
   --output-json
   %{deps}
   -o
   ;%{target}
   ; TODO: wait until dune will support named targets
   moc_Singleton1_c.cpp)))

(rule
 (targets Singleton1_c.cpp Singleton1.h)
 (deps MyControls.ml)
 (action
  (run %{project_root}/ppx/pp/pp_qt.exe -ext cpp %{deps})))

;; adding old style examples

(rule
 (targets moc_myslider_c.cpp)
 (deps myslider.h)
 (action
  (run moc %{deps} -o %{targets})))

(rule
 (targets myslider_c.cpp myslider.h)
 (deps MyControls.ml)
 (action
  (run ../ppx/pp/pp_qt.exe -ext cpp %{deps})))

; TODO: generated file should depend on the contents of .qrc file
;     xpath -q -e '/RCC/qresource/file/text()' hack/src/resources.qrc
; from  the apt package libxml-xpath-perl

(rule
 (targets qrc_resources.cpp)
 (deps
  (:qrc src/resources.qrc)
  ui/Root.qml)
 (action
  (run rcc -name resources %{qrc} -o %{targets})))

(rule
 (targets c_flags.sexp ocaml_qt_libs.sexp c_library_flags.sexp)
 (deps %{project_root}/config/discover.exe)
 (action
  (run %{project_root}/config/discover.exe)))

(rule
 (targets import_name_my_namespace.sexp)
 (deps config/discover.exe)
 (action
  (run config/discover.exe)))
